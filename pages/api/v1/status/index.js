import database from "infra/database.js";

async function status(request, response) {
  const result = await database.query("SELECT 1 + 1;");
  console.log(result);

  response.status(200).json({
    status: "OK",
    message: "Tabnews is running",
    timestamp: new Date().toISOString(),
    version: "1.0.0",
    uptime: process.uptime(),
    memoryUsage: process.memoryUsage(),
    cpuUsage: process.cpuUsage(),
    environment: process.env.NODE_ENV || "development",
    nodeVersion: process.version,
    platform: process.platform,
    arch: process.arch,
    hostname: process.env.HOSTNAME || "localhost",
    ip: request.headers["x-forwarded-for"] || request.connection.remoteAddress,
    requestId: request.headers["x-request-id"] || "N/A",
    requestMethod: request.method,
    requestUrl: request.url,
    requestHeaders: request.headers,
    requestBody: request.body,
    requestQuery: request.query,
    requestParams: request.params,
    requestCookies: request.cookies,
    requestSession: request.session,
    requestUser: request.user,
    requestIp: request.ip,
    requestProtocol: request.protocol,
    requestPath: request.path,
    requestHostname: request.hostname,
    requestPort: request.port,
    requestBaseUrl: request.baseUrl,
    requestOriginalUrl: request.originalUrl,
    requestSubdomains: request.subdomains,
    requestAccept: request.accept,
    requestAcceptCharset: request.acceptCharset,
    requestAcceptEncoding: request.acceptEncoding,
    requestAcceptLanguage: request.acceptLanguage,
    requestReferer: request.referer,
    requestReferrer: request.referrer,
    requestXRequestedWith: request.xhr,
    requestXForwardedFor: request.headers["x-forwarded-for"],
    requestXForwardedHost: request.headers["x-forwarded-host"],
    requestXForwardedProto: request.headers["x-forwarded-proto"],
    requestXForwardedPort: request.headers["x-forwarded-port"],
    requestXRealIp: request.headers["x-real-ip"],
    requestXHttpMethodOverride: request.headers["x-http-method-override"],
    requestXHttpRequestId: request.headers["x-http-request-id"],
    requestXHttpRequestStart: request.headers["x-http-request-start"],
    requestXHttpRequestEnd: request.headers["x-http-request-end"],
    requestXHttpRequestDuration: request.headers["x-http-request-duration"],
    requestXHttpRequestStatus: request.headers["x-http-request-status"],
    requestXHttpRequestSize: request.headers["x-http-request-size"],
    requestXHttpResponseSize: request.headers["x-http-response-size"],
    requestXHttpResponseTime: request.headers["x-http-response-time"],
    requestXHttpResponseStatus: request.headers["x-http-response-status"],
    requestXHttpResponseHeaders: request.headers["x-http-response-headers"],
    requestXHttpResponseBody: request.headers["x-http-response-body"],
    requestXHttpResponseCookies: request.headers["x-http-response-cookies"],
    requestXHttpResponseSession: request.headers["x-http-response-session"],
    requestXHttpResponseUser: request.headers["x-http-response-user"],
    requestXHttpResponseIp: request.headers["x-http-response-ip"],
    requestXHttpResponseProtocol: request.headers["x-http-response-protocol"],
    requestXHttpResponsePath: request.headers["x-http-response-path"],
  });
}

export default status;
